//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmallLabyWpfPlayer.ServiceRefSmallLaby {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TerrainType", Namespace="http://schemas.datacontract.org/2004/07/SmallLabyServer")]
    public enum TerrainType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Grass = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Forest = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Water = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mountain = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerInfo", Namespace="http://schemas.datacontract.org/2004/07/SmallLabyServer")]
    [System.SerializableAttribute()]
    public partial struct PlayerInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemInfo", Namespace="http://schemas.datacontract.org/2004/07/SmallLabyServer")]
    [System.SerializableAttribute()]
    public partial struct ItemInfo : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SmallLabyWpfPlayer.ServiceRefSmallLaby.Item ItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SmallLabyWpfPlayer.ServiceRefSmallLaby.Item Item {
            get {
                return this.ItemField;
            }
            set {
                if ((this.ItemField.Equals(value) != true)) {
                    this.ItemField = value;
                    this.RaisePropertyChanged("Item");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Item", Namespace="http://schemas.datacontract.org/2004/07/SmallLabyServer")]
    public enum Item : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Gold = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bonus = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Exit = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MovementStrategy", Namespace="http://schemas.datacontract.org/2004/07/SmallLabyServer")]
    public enum MovementStrategy : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StandStill = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MoveLeft = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MoveRight = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MoveUp = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MoveDown = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RandomDirection = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceRefSmallLaby.ISmallLaby")]
    public interface ISmallLaby {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/AddPlayer", ReplyAction="http://tempuri.org/ISmallLaby/AddPlayerResponse")]
        int AddPlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/AddPlayer", ReplyAction="http://tempuri.org/ISmallLaby/AddPlayerResponse")]
        System.Threading.Tasks.Task<int> AddPlayerAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/RemovePlayer", ReplyAction="http://tempuri.org/ISmallLaby/RemovePlayerResponse")]
        void RemovePlayer(int player_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/RemovePlayer", ReplyAction="http://tempuri.org/ISmallLaby/RemovePlayerResponse")]
        System.Threading.Tasks.Task RemovePlayerAsync(int player_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/GetMap", ReplyAction="http://tempuri.org/ISmallLaby/GetMapResponse")]
        SmallLabyWpfPlayer.ServiceRefSmallLaby.TerrainType[] GetMap();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/GetMap", ReplyAction="http://tempuri.org/ISmallLaby/GetMapResponse")]
        System.Threading.Tasks.Task<SmallLabyWpfPlayer.ServiceRefSmallLaby.TerrainType[]> GetMapAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/GetPlayers", ReplyAction="http://tempuri.org/ISmallLaby/GetPlayersResponse")]
        SmallLabyWpfPlayer.ServiceRefSmallLaby.PlayerInfo[] GetPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/GetPlayers", ReplyAction="http://tempuri.org/ISmallLaby/GetPlayersResponse")]
        System.Threading.Tasks.Task<SmallLabyWpfPlayer.ServiceRefSmallLaby.PlayerInfo[]> GetPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/GetItems", ReplyAction="http://tempuri.org/ISmallLaby/GetItemsResponse")]
        SmallLabyWpfPlayer.ServiceRefSmallLaby.ItemInfo[] GetItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/GetItems", ReplyAction="http://tempuri.org/ISmallLaby/GetItemsResponse")]
        System.Threading.Tasks.Task<SmallLabyWpfPlayer.ServiceRefSmallLaby.ItemInfo[]> GetItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/GetMapWidth", ReplyAction="http://tempuri.org/ISmallLaby/GetMapWidthResponse")]
        int GetMapWidth();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/GetMapWidth", ReplyAction="http://tempuri.org/ISmallLaby/GetMapWidthResponse")]
        System.Threading.Tasks.Task<int> GetMapWidthAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/GetMapHeight", ReplyAction="http://tempuri.org/ISmallLaby/GetMapHeightResponse")]
        int GetMapHeight();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/GetMapHeight", ReplyAction="http://tempuri.org/ISmallLaby/GetMapHeightResponse")]
        System.Threading.Tasks.Task<int> GetMapHeightAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/SetMovementStrategy", ReplyAction="http://tempuri.org/ISmallLaby/SetMovementStrategyResponse")]
        void SetMovementStrategy(int player_id, SmallLabyWpfPlayer.ServiceRefSmallLaby.MovementStrategy strategy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmallLaby/SetMovementStrategy", ReplyAction="http://tempuri.org/ISmallLaby/SetMovementStrategyResponse")]
        System.Threading.Tasks.Task SetMovementStrategyAsync(int player_id, SmallLabyWpfPlayer.ServiceRefSmallLaby.MovementStrategy strategy);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISmallLabyChannel : SmallLabyWpfPlayer.ServiceRefSmallLaby.ISmallLaby, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SmallLabyClient : System.ServiceModel.ClientBase<SmallLabyWpfPlayer.ServiceRefSmallLaby.ISmallLaby>, SmallLabyWpfPlayer.ServiceRefSmallLaby.ISmallLaby {
        
        public SmallLabyClient() {
        }
        
        public SmallLabyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SmallLabyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmallLabyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmallLabyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddPlayer(string name) {
            return base.Channel.AddPlayer(name);
        }
        
        public System.Threading.Tasks.Task<int> AddPlayerAsync(string name) {
            return base.Channel.AddPlayerAsync(name);
        }
        
        public void RemovePlayer(int player_id) {
            base.Channel.RemovePlayer(player_id);
        }
        
        public System.Threading.Tasks.Task RemovePlayerAsync(int player_id) {
            return base.Channel.RemovePlayerAsync(player_id);
        }
        
        public SmallLabyWpfPlayer.ServiceRefSmallLaby.TerrainType[] GetMap() {
            return base.Channel.GetMap();
        }
        
        public System.Threading.Tasks.Task<SmallLabyWpfPlayer.ServiceRefSmallLaby.TerrainType[]> GetMapAsync() {
            return base.Channel.GetMapAsync();
        }
        
        public SmallLabyWpfPlayer.ServiceRefSmallLaby.PlayerInfo[] GetPlayers() {
            return base.Channel.GetPlayers();
        }
        
        public System.Threading.Tasks.Task<SmallLabyWpfPlayer.ServiceRefSmallLaby.PlayerInfo[]> GetPlayersAsync() {
            return base.Channel.GetPlayersAsync();
        }
        
        public SmallLabyWpfPlayer.ServiceRefSmallLaby.ItemInfo[] GetItems() {
            return base.Channel.GetItems();
        }
        
        public System.Threading.Tasks.Task<SmallLabyWpfPlayer.ServiceRefSmallLaby.ItemInfo[]> GetItemsAsync() {
            return base.Channel.GetItemsAsync();
        }
        
        public int GetMapWidth() {
            return base.Channel.GetMapWidth();
        }
        
        public System.Threading.Tasks.Task<int> GetMapWidthAsync() {
            return base.Channel.GetMapWidthAsync();
        }
        
        public int GetMapHeight() {
            return base.Channel.GetMapHeight();
        }
        
        public System.Threading.Tasks.Task<int> GetMapHeightAsync() {
            return base.Channel.GetMapHeightAsync();
        }
        
        public void SetMovementStrategy(int player_id, SmallLabyWpfPlayer.ServiceRefSmallLaby.MovementStrategy strategy) {
            base.Channel.SetMovementStrategy(player_id, strategy);
        }
        
        public System.Threading.Tasks.Task SetMovementStrategyAsync(int player_id, SmallLabyWpfPlayer.ServiceRefSmallLaby.MovementStrategy strategy) {
            return base.Channel.SetMovementStrategyAsync(player_id, strategy);
        }
    }
}
